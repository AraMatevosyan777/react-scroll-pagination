{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","photos","setPhotos","currentPage","setCurrentPage","fetching","setFetching","setTotalCount","useEffect","axios","get","then","res","headers","data","finally","document","addEventListener","scrollHandle","removeEventListener","e","target","documentElement","scrollHeight","scrollTop","window","innerHeight","map","photo","className","id","title","src","thumbnailUrl","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"4OAgDeA,EA7CH,WAAO,IAAD,EACYC,mBAAS,IADrB,mBACTC,EADS,KACDC,EADC,OAEsBF,mBAAS,GAF/B,mBAETG,EAFS,KAEIC,EAFJ,OAGgBJ,mBAAS,GAHzB,mBAGTK,EAHS,KAGCC,EAHD,OAIoBN,mBAAS,GAJ7B,mBAIGO,GAJH,WAMhBC,qBAAU,WACLH,GACDI,IAAMC,IAAN,sEAAyEP,IAC1EQ,MAAK,SAAAC,GACJL,EAAcK,EAAIC,QAAQ,kBAC1BX,EAAU,GAAD,mBAAKD,GAAL,YAAgBW,EAAIE,QAC7BV,EAAeD,EAAc,MAE9BY,SAAQ,kBAAKT,GAAY,QAEzB,CAACD,IAEJG,qBAAU,WAER,OADAQ,SAASC,iBAAiB,SAAUC,GAC7B,WACLF,SAASG,oBAAoB,SAAUD,MAExC,IAEH,IAAMA,EAAe,SAACE,GACjBA,EAAEC,OAAOC,gBAAgBC,cAAgBH,EAAEC,OAAOC,gBAAgBE,UAAYC,OAAOC,aAAe,KAGrGpB,GAAY,IAIhB,OACE,8BACGL,EAAO0B,KAAI,SAAAC,GAAK,OACf,sBAAoBC,UAAU,QAA9B,UACE,sBAAKA,UAAU,QAAf,UAAwBD,EAAME,GAA9B,KAAoCF,EAAMG,SAC1C,qBAAKC,IAAKJ,EAAMK,iBAFRL,EAAME,UC3BTI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBzB,MAAK,YAAkD,IAA/C0B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF5B,SAAS6B,eAAe,SAM1BX,M","file":"static/js/main.a67d8720.chunk.js","sourcesContent":["import axios from 'axios'\nimport React, { useEffect, useState } from 'react'\n\nconst App = () => {\n  const [photos, setPhotos] = useState([])\n  const [currentPage, setCurrentPage] = useState(1)\n  const [fetching, setFetching] = useState(1)\n  const [totalCount, setTotalCount] = useState(0)\n\n  useEffect(()=>{\n    if(fetching){\n      axios.get(`https://jsonplaceholder.typicode.com/photos?_limit=10&_page=${currentPage}`)\n    .then(res => {\n      setTotalCount(res.headers['x-total-count'])\n      setPhotos([...photos, ...res.data])\n      setCurrentPage(currentPage + 1)\n    })\n    .finally(()=> setFetching(false))\n    }\n  }, [fetching])\n\n  useEffect(()=>{\n    document.addEventListener('scroll', scrollHandle)\n    return function(){\n      document.removeEventListener('scroll', scrollHandle)\n    }\n  }, [])\n\n  const scrollHandle = (e) => {\n    if(e.target.documentElement.scrollHeight - (e.target.documentElement.scrollTop + window.innerHeight) < 100 \n    // && photos.length < totalCount\n    ){\n      setFetching(true)\n    }\n  }\n\n  return (\n    <div>\n      {photos.map(photo => \n        <div key={photo.id} className='photo'>\n          <div className='title'>{photo.id}. {photo.title}</div>\n          <img src={photo.thumbnailUrl}/>\n        </div>\n        )}\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}